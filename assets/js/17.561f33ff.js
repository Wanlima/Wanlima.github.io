(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{373:function(e,t,a){"use strict";a.r(t);var n=a(44),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"六大设计原则-solid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六大设计原则-solid"}},[e._v("#")]),e._v(" 六大设计原则 SOLID")]),e._v(" "),a("p",[a("img",{attrs:{src:"/solid.png",alt:""}})]),e._v(" "),a("p",[a("strong",[e._v("SOLID")]),e._v(" 是五个面向对象编程的重要原则的缩写。另外，它也是每个开发者必备的基本知识。了解并应用这些原则能"),a("strong",[e._v("让你写出更优质的代码")]),e._v("，变成更优秀的开发者。")]),e._v(" "),a("p",[e._v("SOLID 原则是由 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Robert_C._Martin",target:"_blank",rel:"noopener noreferrer"}},[e._v("Robert C. Martin （Bob 大叔）"),a("OutboundLink")],1),e._v(" 在 21 世纪初定义的。Bob 大叔阐述了几个并且确认了其它已经存在的原则。他说我们应该使用这些原则，让代码获得好的依赖管理。")]),e._v(" "),a("p",[e._v("但是，SOLID 原则在最初并没有被大家熟知直到 "),a("a",{attrs:{href:"https://michaelfeathers.silvrback.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Michael Feathers"),a("OutboundLink")],1),e._v(" 观察到这些原则的首字母正好能拼成缩写 SOLID，这个非常具有代表性的名字。")]),e._v(" "),a("p",[e._v("当应用在我们的代码里面的时候，这组实用的建议可以帮助我们获得以下的好处：")]),e._v(" "),a("ul",[a("li",[e._v("可持续性")]),e._v(" "),a("li",[e._v("扩展性")]),e._v(" "),a("li",[e._v("鲁棒的代码")])]),e._v(" "),a("p",[e._v("但在我们了解每个 SOLID 原则之前， 我们需要回忆"),a("strong",[e._v("软件开发中两个相关的概念")]),e._v("。"),a("strong",[e._v("耦合")]),e._v("和"),a("strong",[e._v("内聚")]),e._v("：")]),e._v(" "),a("h2",{attrs:{id:"耦合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#耦合"}},[e._v("#")]),e._v(" 耦合：")]),e._v(" "),a("p",[e._v("我们可以把它定义为"),a("strong",[e._v("一个类、方法或者任何一个实体直接与另一个实体连接的度")]),e._v("。这个耦合的度也可以被看作依赖的度。")]),e._v(" "),a("ul",[a("li",[e._v("**例子：**当我们想要使用的一个类，与一个或者多个类紧密地绑定在一起（高耦合），我们将最终使用或修改这些类我们所依赖的部分。")])]),e._v(" "),a("h2",{attrs:{id:"内聚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内聚"}},[e._v("#")]),e._v(" 内聚：")]),e._v(" "),a("p",[e._v("内聚是一个系统里两个或多个部分一起执行工作的度量，来获得比每个部分单独工作获得更好的结果。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("例子：")]),e._v(" 星球大战中 Han Solo 和 Chewbacca 一起在千年隼号里。")])]),e._v(" "),a("p",[e._v("**想要有一个高质量的软件，我们必须尝试低耦合高内聚，**而 SOLID 原则正好帮助我们完成这个任务。如果我们遵循这些指引，我们的代码会更健壮，更易于维护，有更高的复用性和可扩展性。同时，可以避免每次变更都要修改多处代码的问题。")]),e._v(" "),a("p",[e._v("让我们把 SOLID 的字母拆开看看每一个对应原则的细节吧。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/solid_detail.png",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"单一职责原则-srp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单一职责原则-srp"}},[e._v("#")]),e._v(" 单一职责原则（SRP）：")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("一个类应该只有一个引起改变的原因。")])])]),e._v(" "),a("p",[e._v("这个原则意味着"),a("strong",[e._v("一个类只能有一个职责并且只完成为它设计的功能任务。")])]),e._v(" "),a("p",[e._v("否则，如果我们的类承担的职责多于一个，那么我们的代码就具有高度的耦合性，并会导致它对于任何改变都很脆弱。")]),e._v(" "),a("p",[a("strong",[e._v("好处：")])]),e._v(" "),a("ul",[a("li",[e._v("降低耦合性。")]),e._v(" "),a("li",[e._v("代码易于理解和维护。")])]),e._v(" "),a("h3",{attrs:{id:"违反-srp-原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#违反-srp-原则"}},[e._v("#")]),e._v(" "),a("strong",[e._v("违反 SRP 原则")])]),e._v(" "),a("ul",[a("li",[e._v("我们的 "),a("strong",[e._v("Customer")]),e._v(" 类"),a("strong",[e._v("有多个的职责：")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Customer {\n\n    private String name;\n\n    // getter and setter methods...\n\n    // This is a Responsibility\n    public void storeCustomer(String customerName) {\n        // store customer into a database...\n    }\n\n    // This is another Responsibility\n    public void generateCustomerReport(String customerName) {\n        // generate a report...\n    }\n}\n\n")])])]),a("p",[a("strong",[e._v("storeCustomer(String name)")]),e._v(" 职责是把顾客存入数据库。这个职责是持续的，应该把它放在顾客类的外面。")]),e._v(" "),a("p",[a("strong",[e._v("generateCustomerReport(String name)")]),e._v(" 职责是生成一个关于顾客的报告，所以它也应该放在顾客类的外面。")]),e._v(" "),a("p",[e._v("当一个类有多个职责，它就更加难以被理解，扩展和修改。")]),e._v(" "),a("h3",{attrs:{id:"更好的解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更好的解决办法"}},[e._v("#")]),e._v(" "),a("strong",[e._v("更好的解决办法：")])]),e._v(" "),a("p",[e._v("我们 "),a("strong",[e._v("为每一个职责创建不同的类。")])]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Customer")]),e._v(" 类：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Customer {\n\n    private String name;\n\n    // getter and setter methods...\n}\n\n")])])]),a("ul",[a("li",[a("strong",[e._v("CustomerDB")]),e._v(" 类用于持续的职责：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class CustomerDB {\n\n    public void storeCustomer(String customerName) {\n        // store customer into a database...\n    }\n}\n\n")])])]),a("ul",[a("li",[a("strong",[e._v("CustomerReportGenerator")]),e._v(" 类用于报告制作的职责：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class CustomerReportGenerator {\n\n    public void generateReport(String customerName) {\n        // generate a report...\n    }\n}\n\n")])])]),a("p",[e._v("这样，我们就有几个类，但是"),a("strong",[e._v("每个类都有单一的职责")]),e._v("，我们就使它变成了低耦合高内聚。")]),e._v(" "),a("h2",{attrs:{id:"开闭原则-ocp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则-ocp"}},[e._v("#")]),e._v(" 开闭原则（OCP）：")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("软件实体（类，模块，方法等）应该对扩展开放，对修改封闭。")])])]),e._v(" "),a("p",[e._v("根据这一原则，一个软件实体能很容易地扩展新功能而不必修改现有的代码。")]),e._v(" "),a("p",[a("strong",[e._v("open for extension:")]),e._v(" 添加新的功能从而满足新的需求。")]),e._v(" "),a("p",[a("strong",[e._v("close for modification:")]),e._v(" 扩展新的功能行为而不需要修改现有的代码。")]),e._v(" "),a("p",[e._v("如果我们应用这个原则，我们会有一个可扩展的系统且在更改需求的时候更不易出错。我们可以用"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Abstraction_(computer_science)",target:"_blank",rel:"noopener noreferrer"}},[e._v("抽象"),a("OutboundLink")],1),e._v("和"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Polymorphism_(computer_science)",target:"_blank",rel:"noopener noreferrer"}},[e._v("多态"),a("OutboundLink")],1),e._v("来帮助我们应用这个原则。")]),e._v(" "),a("p",[a("strong",[e._v("好处：")])]),e._v(" "),a("ul",[a("li",[e._v("代码的可维护性和复用性。")]),e._v(" "),a("li",[e._v("代码会更健壮。")])]),e._v(" "),a("h3",{attrs:{id:"违反-ocp-原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#违反-ocp-原则"}},[e._v("#")]),e._v(" "),a("strong",[e._v("违反 OCP 原则")])]),e._v(" "),a("ul",[a("li",[e._v("我们有一个 "),a("strong",[e._v("Rectangle")]),e._v(" 类：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\npublic class Rectangle {\n\n    private int width;\n    private int height;\n\n    // getter and setter methods...\n}\n\n")])])]),a("ul",[a("li",[e._v("同时，我们有一个 "),a("strong",[e._v("Square")]),e._v(" 类")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Square {\n\n    private int side;\n\n    // getter and setter methods...\n}\n\n")])])]),a("ul",[a("li",[e._v("我们还有一个 "),a("strong",[e._v("ShapePrinter")]),e._v(" 类可以画不同的形状：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\npublic class ShapePrinter {\n\n    public void drawShape(Object shape) {\n\n        if (shape instanceof Rectangle) {\n            // Draw Rectangle...\n        } else if (shape instanceof Square) {\n            // Draw Square...\n        }\n    }\n}\n\n")])])]),a("p",[e._v("可以看到，当我们每次想要画一个新的形状我们就要"),a("strong",[e._v("修改 ShapePrinter 类里的 drawShape 方法来接受这个新的形状。")])]),e._v(" "),a("p",[e._v("当要画新的形状种类的时候，ShapePrinter 类就会变得更让人难以理解并且不易于改变。")]),e._v(" "),a("p",[e._v("所以 "),a("strong",[e._v("ShapePrinter")]),e._v(" 类不对修改封闭。")]),e._v(" "),a("h3",{attrs:{id:"一个解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个解决办法"}},[e._v("#")]),e._v(" "),a("strong",[e._v("一个解决办法：")])]),e._v(" "),a("ul",[a("li",[e._v("我们添加一个 "),a("strong",[e._v("Shape")]),e._v(" 抽象类：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\npublic abstract class Shape {\n    abstract void draw();\n}\n\n")])])]),a("ul",[a("li",[e._v("重构 "),a("strong",[e._v("Rectangle")]),e._v(" 类以继承自 "),a("strong",[e._v("Shape:")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Rectangle extends Shape {\n\n    private int width;\n    private int height;\n\n    // getter and setter methods...\n\n    @Override\n    public void draw() {\n        // Draw the Rectangle...\n    }\n}\n\n")])])]),a("p",[e._v("重构 "),a("strong",[e._v("Square")]),e._v(" 类以继承自 "),a("strong",[e._v("Shape:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Square extends Shape {\n\n    private int side;\n\n    // getter and setter methods...\n\n    @Override\n    public void draw() {\n        // Draw the Square\n    }\n}\n\n")])])]),a("ul",[a("li",[a("strong",[e._v("ShapePrinter")]),e._v(" 的重构：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class ShapePrinter {\n\n    public void drawShape(Shape shape) {\n        shape.draw();\n    }\n}\n\n")])])]),a("p",[e._v("现在，"),a("strong",[e._v("ShapePrinter")]),e._v(" 类在我们添加了新的形状类型的同时也保持了完整性。")]),e._v(" "),a("h3",{attrs:{id:"另一个解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#另一个解决方法"}},[e._v("#")]),e._v(" "),a("strong",[e._v("另一个解决方法：")])]),e._v(" "),a("p",[e._v("用这个方法，"),a("strong",[e._v("ShapePrinter")]),e._v(" 也能在添加新形状的同时保持完整性，因为 "),a("strong",[e._v("drawShape 方法接受 Shape 抽象。")])]),e._v(" "),a("ul",[a("li",[e._v("我们把 "),a("strong",[e._v("Shape")]),e._v(" 变成一个接口：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface Shape {\n    void draw();\n}\n\n")])])]),a("ul",[a("li",[e._v("重构 "),a("strong",[e._v("Rectangle")]),e._v(" 类以实现 "),a("strong",[e._v("Shape:")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Rectangle implements Shape {\n\n    private int width;\n    private int height;\n\n    // getter and setter methods...\n\n    @Override\n    public void draw() {\n        // Draw the Rectangle...\n    }\n}\n\n")])])]),a("ul",[a("li",[e._v("重构 "),a("strong",[e._v("Square")]),e._v(" 类以实现 "),a("strong",[e._v("Shape:")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Square implements Shape {\n\n    private int side;\n\n    // getter and setter methods...\n\n    @Override\n    public void draw() {\n        // Draw the Square\n    }\n}\n\n")])])]),a("ul",[a("li",[a("strong",[e._v("ShapePrinter:")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class ShapePrinter {\n\n    public void drawShape(Shape shape) {\n        shape.draw();\n    }\n}\n\n")])])]),a("h2",{attrs:{id:"里氏替换原则-lsp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#里氏替换原则-lsp"}},[e._v("#")]),e._v(" 里氏替换原则（LSP）：")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("程序里的对象都应该可以被它的子类实例替换而不用更改程序.")])])]),e._v(" "),a("p",[e._v("这个原则由 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Barbara_Liskov",target:"_blank",rel:"noopener noreferrer"}},[e._v("Barbara Liskov"),a("OutboundLink")],1),e._v(" 定义。他说程序里的对象都应该可以被它的子类实例替换而不用更改系统的正常工作.")]),e._v(" "),a("p",[a("strong",[e._v("好处:")])]),e._v(" "),a("ul",[a("li",[e._v("更高的代码复用性。")]),e._v(" "),a("li",[e._v("类的层次结构易于理解。")])]),e._v(" "),a("p",[e._v("经常用于解释这个原则的经典例子就是长方形的例子。")]),e._v(" "),a("h3",{attrs:{id:"违反-lsp-原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#违反-lsp-原则"}},[e._v("#")]),e._v(" "),a("strong",[e._v("违反 LSP 原则:")])]),e._v(" "),a("ul",[a("li",[e._v("我们有一个 "),a("strong",[e._v("Rectangle")]),e._v(" 类:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Rectangle {\n\n    private int width;\n    private int height;\n\n    public void setWidth(int width) {\n        this.width = width;\n    }\n\n    public void setHeight(int height) {\n        this.height = height;\n    }\n\n    public int getArea() {\n        return width * height;\n    }\n}\n\n")])])]),a("ul",[a("li",[e._v("还有一个 "),a("strong",[e._v("Square")]),e._v(" 类：")])]),e._v(" "),a("p",[e._v("因为一个正方形是一个长方形（从数学上讲），我们决定把 "),a("strong",[e._v("Square")]),e._v(" 作为 "),a("strong",[e._v("Rectangle")]),e._v(" 的子类。")]),e._v(" "),a("p",[e._v("我们在重写的 "),a("strong",[e._v("setHeight()")]),e._v(" 和 "),a("strong",[e._v("setWidth()")]),e._v(" 方法中设置（与它的父类）同样的尺寸（宽和高），让 "),a("strong",[e._v("Square")]),e._v(" 的实例依然有效。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Square extends Rectangle {\n\n    @Override \n    public void setWidth(int width) {\n        super.setWidth(width);\n        super.setHeight(width);\n    }\n\n    @Override\n    public void setHeight(int height) {\n        super.setWidth(height);\n        super.setHeight(height);\n    }\n}\n\n")])])]),a("p",[e._v("所以现在我们可以传一个 "),a("strong",[e._v("Square")]),e._v(" 实例到一个需要 "),a("strong",[e._v("Rectangle")]),e._v(" 实例的地方。")]),e._v(" "),a("p",[e._v("但是如果我们这样做，我们会"),a("strong",[e._v("破坏 Rectangle 的行为假设：")])]),e._v(" "),a("p",[e._v("下面对于 "),a("strong",[e._v("Rectangle")]),e._v(" 的假设是"),a("strong",[e._v("对的：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class LiskovSubstitutionTest {\n\n    public static void main(String args[]) {\n        Rectangle rectangle = new Rectangle();\n        rectangle.setWidth(2);\n        rectangle.setHeight(5);\n\n        if (rectangle.getArea() == 10) {\n            System.out.println(rectangle.getArea());\n        }\n    }\n}\n\n")])])]),a("p",[e._v("但是同样的假设却不适用于 "),a("strong",[e._v("Square:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class LiskovSubstitutionTest {\n\n    public static void main(String args[]) {\n        Rectangle rectangle = new Square(); // Square\n        rectangle.setWidth(2);\n        rectangle.setHeight(5);\n\n        if (rectangle.getArea() == 10) {\n            System.out.println(rectangle.getArea());\n        }\n    }\n}\n\n")])])]),a("p",[a("strong",[e._v("Square")]),e._v(" 不是 "),a("strong",[e._v("Rectangle")]),e._v(" 正确的替代品，因为它不遵循 "),a("strong",[e._v("Rectangle")]),e._v(" 的行为规则。")]),e._v(" "),a("p",[a("strong",[e._v("Square")]),e._v(" / "),a("strong",[e._v("Rectangle")]),e._v(" 层次分离虽然不能反应出任何问题，但是这"),a("strong",[e._v("违反了里氏替换原则")]),e._v("！")]),e._v(" "),a("h3",{attrs:{id:"一个解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个解决方法"}},[e._v("#")]),e._v(" "),a("strong",[e._v("一个解决方法：")])]),e._v(" "),a("ul",[a("li",[e._v("用 "),a("strong",[e._v("Shape")]),e._v(" 接口来获取面积：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface Shape {\n    int area();\n}\n\n")])])]),a("ul",[a("li",[e._v("重构 "),a("strong",[e._v("Rectangle")]),e._v(" 以实现 "),a("strong",[e._v("Shape:")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Rectangle implements Shape {\n\n    private int width;\n    private int height;\n\n    public void setWidth(int width) {\n        this.width = width;\n    }\n\n    public void setHeight(int height) {\n        this.height = height;\n    }\n\n    @Override\n    public int area() {\n        return width * height;\n    }\n}\n\n")])])]),a("p",[e._v("重构 "),a("strong",[e._v("Square")]),e._v(" 以实现 "),a("strong",[e._v("Shape:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Square implements Shape {\n\n    private int size;\n\n    public void setSize(int size) {\n        this.size = size;\n    }\n\n    @Override\n    public int area() {\n        return size * size;\n    }\n}\n\n")])])]),a("h4",{attrs:{id:"另一个解决方法经常与非可变性一起应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#另一个解决方法经常与非可变性一起应用"}},[e._v("#")]),e._v(" "),a("strong",[e._v("另一个解决方法经常与"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Immutable_object",target:"_blank",rel:"noopener noreferrer"}},[e._v("非可变性"),a("OutboundLink")],1),e._v("一起应用")])]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Rectangle")]),e._v(" 重构：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Rectangle {\n\n    private final int width;\n    private final int height;\n\n    public Rectangle(int width, int height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    public int getArea() {\n        return width * height;\n    }\n}\n\n")])])]),a("ul",[a("li",[e._v("重构 "),a("strong",[e._v("Square")]),e._v(" 以继承 "),a("strong",[e._v("Rectangle:")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Square extends Rectangle {\n\n    public Square(int side) {\n        super(side, side);\n    }\n}\n\n")])])]),a("p",[e._v("很多时候，我们对类的建模依赖于我们想展示的现实世界客体的属性，但更重要的是我们应该关注它们各自的行为来避免这种错误。")]),e._v(" "),a("h2",{attrs:{id:"接口隔离原则-isp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口隔离原则-isp"}},[e._v("#")]),e._v(" 接口隔离原则（ISP）：")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("多个专用的接口比一个通用接口好。")])])]),e._v(" "),a("p",[e._v("这个原则定义了"),a("strong",[e._v("一个类决不要实现不会用到的接口")]),e._v("。不遵循这个原则意味着在我们在实现里会依赖很多我们并不需要的方法，但又不得不去定义。")]),e._v(" "),a("p",[e._v("所以，实现多个特定的接口比实现一个通用接口要好。一个接口被需要用到的类所定义，所以这个接口不应该有这个类不需要实现的其它方法。")]),e._v(" "),a("p",[a("strong",[e._v("好处：")])]),e._v(" "),a("ul",[a("li",[e._v("系统解耦。")]),e._v(" "),a("li",[e._v("代码易于重构。")])]),e._v(" "),a("h3",{attrs:{id:"违反-isp-原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#违反-isp-原则"}},[e._v("#")]),e._v(" 违反 ISP 原则")]),e._v(" "),a("ul",[a("li",[e._v("我们有一个 "),a("strong",[e._v("Car")]),e._v(" 的接口：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface Car {\n    void startEngine();\n    void accelerate();\n}\n\n")])])]),a("ul",[a("li",[e._v("同时也有一个实现 "),a("strong",[e._v("Car")]),e._v(" 接口的 "),a("strong",[e._v("Mustang")]),e._v(" 类：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Mustang implements Car {\n\n    @Override\n    public void startEngine() {\n        // start engine...\n    }\n\n    @Override\n    public void accelerate() {\n        // accelerate...\n    }\n}\n\n")])])]),a("p",[e._v("现在我们有个新的需求，要添加一个新的车型：")]),e._v(" "),a("p",[e._v("一辆 "),a("strong",[e._v("DeloRean,")]),e._v(" 但这并不是一个普通的 DeLorean，我们的 "),a("strong",[e._v("DeloRean")]),e._v(" 非常特别，它有穿梭时光的功能。")]),e._v(" "),a("p",[e._v("像以往一样，我们没有时间来做一个好的实现，而且 "),a("strong",[e._v("DeloRean")]),e._v(" 必须马上回到过去。")]),e._v(" "),a("ul",[a("li",[e._v("为我们的 "),a("strong",[e._v("DeloRean")]),e._v(" 在 "),a("strong",[e._v("Car")]),e._v(" 接口里增加两个新的方法：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface Car {\n    void startEngine();\n    void accelerate();\n    void backToThePast();\n    void backToTheFuture();\n}\n\n")])])]),a("ul",[a("li",[e._v("现在我们的 "),a("strong",[e._v("DeloRean")]),e._v(" 实现 "),a("strong",[e._v("Car")]),e._v(" 的方法：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class DeloRean implements Car {\n\n    @Override\n    public void startEngine() {\n        // start engine...\n    }\n\n    @Override\n    public void accelerate() {\n        // accelerate...\n    }\n\n    @Override\n    public void backToThePast() {\n        // back to the past...\n    }\n\n    @Override\n    public void backToTheFuture() {\n        // back to the future...\n    }\n}\n\n")])])]),a("ul",[a("li",[e._v("但是现在 "),a("strong",[e._v("Mustang")]),e._v(" 被迫去实现在 "),a("strong",[e._v("Car")]),e._v(" 接口里的新方法：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Mustang implements Car {\n\n    @Override\n    public void startEngine() {\n        // 启动引擎\n    }\n\n    @Override\n    public void accelerate() {\n        // 加速\n    }\n\n    @Override\n    public void backToThePast() {\n        // 因为 Mustang 不能回到过去！\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public void backToTheFuture() {\n        // 因为 Mustang 不能穿越去未来！\n        throw new UnsupportedOperationException();\n    }\n}\n\n")])])]),a("p",[e._v("在这种情况下，Mustang "),a("strong",[e._v("违反了接口隔离的原则")]),e._v("，因为它实现了它不会用到的方法。")]),e._v(" "),a("h3",{attrs:{id:"使用接口隔离的解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用接口隔离的解决方法"}},[e._v("#")]),e._v(" 使用接口隔离的解决方法：")]),e._v(" "),a("ul",[a("li",[e._v("重构 "),a("strong",[e._v("Car")]),e._v(" 接口：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface Car {\n    void startEngine();\n    void accelerate();\n}\n\n")])])]),a("ul",[a("li",[e._v("增添一个 "),a("strong",[e._v("TimeMachine")]),e._v(" 接口：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface TimeMachine {\n    void backToThePast();\n    void backToTheFuture();\n}\n\n")])])]),a("ul",[a("li",[e._v("重构 "),a("strong",[e._v("Mustang（只实现 Car 的接口）")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Mustang implements Car {\n\n    @Override\n    public void startEngine() {\n        // 启动引擎\n    }\n\n    @Override\n    public void accelerate() {\n        // 加速\n    }\n}\n\n")])])]),a("ul",[a("li",[e._v("重构 "),a("strong",[e._v("DeloRean（同时实现 Car 和 TimeMachine）")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class DeloRean implements Car, TimeMachine {\n\n    @Override\n    public void startEngine() {\n        // 启动引擎\n    }\n\n    @Override\n    public void accelerate() {\n        // 加速\n    }\n\n    @Override\n    public void backToThePast() {\n        // 回到过去\n    }\n\n    @Override\n    public void backToTheFuture() {\n        // 到未来去\n    }\n}\n\n")])])]),a("h2",{attrs:{id:"依赖倒转原则-dip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖倒转原则-dip"}},[e._v("#")]),e._v(" 依赖倒转原则 (DIP):")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("高层次的模块不应该依赖于低层次的模块，它们都应该依赖于抽象。")])]),e._v(" "),a("p",[a("strong",[e._v("抽象不应该依赖于细节。细节应该依赖于抽象。")])])]),e._v(" "),a("p",[e._v("依赖倒转原则的意思是一个特定的类不应该直接依赖于另外一个类，但是可以依赖于这个类的抽象（接口）。")]),e._v(" "),a("p",[e._v("当我们应用这个原则的时候我们能减少对特定实现的依赖性，让我们的代码复用性更高。")]),e._v(" "),a("p",[a("strong",[e._v("好处:")])]),e._v(" "),a("ul",[a("li",[e._v("减少耦合。")]),e._v(" "),a("li",[e._v("代码更高的复用性。")])]),e._v(" "),a("h3",{attrs:{id:"违反-dip-原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#违反-dip-原则"}},[e._v("#")]),e._v(" 违反 DIP 原则:")]),e._v(" "),a("ul",[a("li",[e._v("我们有一个类叫 "),a("strong",[e._v("DeliveryDriver")]),e._v(" 代表着一个司机为快递公司工作。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class DeliveryDriver {\n\n    public void deliverProduct(Product product){\n        // 运送产品\n    }\n}\n\n")])])]),a("ul",[a("li",[a("strong",[e._v("DeliveryCompany")]),e._v(" 类处理货物装运：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class DeliveryCompany {\n\n    public void sendProduct(Product product) {\n        DeliveryDriver deliveryDriver = new DeliveryDriver();\n        deliveryDriver.deliverProduct(product);\n    }\n}\n\n")])])]),a("p",[e._v("我们注意到 "),a("strong",[e._v("DeliveryCompany")]),e._v(" 创建并使用 DeliveryDriver 实例。所以 "),a("strong",[e._v("DeliveryCompany")]),e._v(" 是一个依赖于低层次类的高层次的类，这就"),a("strong",[e._v("违背了依赖倒转原则")]),e._v("。（译者注：上述代码中 DeliveryCompany 需要运送货物，必须需要一个 DeliveryDriver 参与。但如果以后对司机有更多的要求，那我们既要修改 DeliveryDriver 也要修改上述代码。这样造成的依赖，耦合度高）")]),e._v(" "),a("h3",{attrs:{id:"a-solution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-solution"}},[e._v("#")]),e._v(" A solution:")]),e._v(" "),a("h3",{attrs:{id:"解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[e._v("#")]),e._v(" 解决方法:")]),e._v(" "),a("ul",[a("li",[e._v("我们创建 "),a("strong",[e._v("DeliveryService")]),e._v(" 接口，这样我们就有了一个抽象。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface DeliveryService {\n    void deliverProduct(Product product);\n}\n\n")])])]),a("ul",[a("li",[e._v("重构 "),a("strong",[e._v("DeliveryDriver")]),e._v(" 类以实现 "),a("strong",[e._v("DeliveryService")]),e._v(" 的抽象方法：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class DeliveryDriver implements DeliveryService {\n\n    @Override\n    public void deliverProduct(Product product) {\n        // 运送产品\n    }\n}\n\n")])])]),a("ul",[a("li",[e._v("重构 "),a("strong",[e._v("DeliveryCompany")]),e._v("，使它依赖于一个抽象而不是一个具体的东西。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class DeliveryCompany {\n\n    private DeliveryService deliveryService;\n\n    public DeliveryCompany(DeliveryService deliveryService) {\n        this.deliveryService = deliveryService;\n    }\n\n    public void sendProduct(Product product) {\n        this.deliveryService.deliverProduct(product);\n    }\n}\n\n")])])]),a("p",[e._v("现在，依赖在别的地方创建，并且从类构造器中被注入。")]),e._v(" "),a("p",[e._v("千万不要把这个原则与"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Dependency_injection",target:"_blank",rel:"noopener noreferrer"}},[e._v("依赖注入"),a("OutboundLink")],1),e._v("混淆。依赖注入是一种设计模式，帮助我们应用这个原则来确保各个类之间的合作不涉及相互依赖。")]),e._v(" "),a("p",[e._v("这里有好几个库使依赖注入更容易实现，像 "),a("a",{attrs:{href:"https://github.com/google/guice",target:"_blank",rel:"noopener noreferrer"}},[e._v("Guice"),a("OutboundLink")],1),e._v(" 或者非常流行的 "),a("a",{attrs:{href:"https://github.com/google/dagger",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dagger2"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"结论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[e._v("#")]),e._v(" 结论")]),e._v(" "),a("p",[e._v("遵循 SOLID 原则来构建高质量, 易于扩展, 足够健壮并且可复用的软件是非常必要的。同时, 我们也不要忘了从实际和常识出发, 因为有的时候过份设计会使简单的问题复杂化。")])])}),[],!1,null,null,null);t.default=r.exports}}]);