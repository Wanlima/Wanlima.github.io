(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{365:function(_,a,n){"use strict";n.r(a);var t=n(44),l=Object(t.a)({},(function(){var _=this,a=_.$createElement,n=_._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[n("h3",{attrs:{id:"block本质"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#block本质"}},[_._v("#")]),_._v(" Block本质")]),_._v(" "),n("blockquote",[n("p",[_._v("封装了函数调用以及函数调用环境的"),n("strong",[_._v("OC对象")]),_._v("。")])]),_._v(" "),n("h3",{attrs:{id:"block类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#block类型"}},[_._v("#")]),_._v(" Block类型")]),_._v(" "),n("h4",{attrs:{id:"global"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#global"}},[_._v("#")]),_._v(" Global:")]),_._v(" "),n("blockquote",[n("p",[_._v("全局Block，全局静态变量、全局变量、局部静态变量、不访问外部变量。")])]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[_._v('int main(int argc, char * argv[]) {\n    void(^global)(void) = ^() {\n        NSLog(@"这是一个全局Block！");\n    };\n\n    NSLog(@"%@", global);\n\n    NSString * appDelegateClassName;\n    @autoreleasepool {\n        // Setup code that might create autoreleased objects goes here.\n        appDelegateClassName = NSStringFromClass([AppDelegate class]);\n    }\n\n    return UIApplicationMain(argc, argv, nil, appDelegateClassName);\n}\n')])])]),n("p",[_._v("打印信息：")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[_._v("$ <__NSGlobalBlock__: 0x1009c4038>\n")])])]),n("h4",{attrs:{id:"stack"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[_._v("#")]),_._v(" Stack:")]),_._v(" "),n("blockquote",[n("p",[_._v("访问局部变量。")])]),_._v(" "),n("p",[_._v("先把main.m改为MRC，因为ARC会帮助我们做很多事情，可能会影响我们的观察:")]),_._v(" "),n("blockquote",[n("p",[n("code",[_._v("Targets")]),_._v(" -> "),n("code",[_._v("Build Phases")]),_._v(" 选项下 "),n("code",[_._v("Compile Sources")]),_._v(" 下选择 "),n("code",[_._v("main.m")]),_._v("，双击，输入 "),n("code",[_._v("-fno-objc-arc")]),_._v("。")])]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[_._v('int main(int argc, char * argv[]) {\n    int d = 40;\n    void(^stack)(int, int) = ^(int a, int b) {\n        NSLog(@"%d", a+b);\n        NSLog(@"%d", d);\n    };\n\n    NSLog(@"%@", stack);\n\n    NSString * appDelegateClassName;\n    @autoreleasepool {\n        // Setup code that might create autoreleased objects goes here.\n        appDelegateClassName = NSStringFromClass([AppDelegate class]);\n    }\n\n    return UIApplicationMain(argc, argv, nil, appDelegateClassName);\n}\n\n')])])]),n("p",[_._v("打印信息：")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[_._v("$ <__NSStackBlock__: 0x16f443840>\n")])])]),n("h4",{attrs:{id:"malloc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#malloc"}},[_._v("#")]),_._v(" Malloc:")]),_._v(" "),n("p",[_._v("对栈区Block拷贝：")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[_._v('int main(int argc, char * argv[]) {\n    \n    int d = 40;\n    void(^stack)(int, int) = ^(int a, int b) {\n        NSLog(@"%d", a+b);\n        NSLog(@"%d", d);\n    };\n\n    NSLog(@"%@", stack);\n\n    void(^malloc)(int, int) = [stack copy];\n    NSLog(@"%@", malloc);\n\n    NSString * appDelegateClassName;\n    @autoreleasepool {\n        // Setup code that might create autoreleased objects goes here.\n        appDelegateClassName = NSStringFromClass([AppDelegate class]);\n    }\n\n    return UIApplicationMain(argc, argv, nil, appDelegateClassName);\n}\n\n')])])]),n("p",[_._v("打印信息：")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[_._v("$ <__NSStackBlock__: 0x16b3af840>\n$ <__NSMallocBlock__: 0x282657540>\n")])])]),n("blockquote",[n("p",[_._v("栈上的Block，如果其所属的变量作用域结束，该Block就被废弃，如同一般的自动变量。因此， ARC 下Block访问外部变量、函数返回Block，编译器会恰当地进行判断是否有需要copy到堆上。")])]),_._v(" "),n("p",[_._v("例如下面函数返回值为Block类型的函数：")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[_._v("typedef int (^blk_t)(int);\n\nblk_t func(int rate) {\n    return ^(int count) { return rate * count; };\n}\n")])])]),n("p",[_._v("分析可知：")]),_._v(" "),n("p",[_._v("上面的函数返回的Block是配置在栈上的，所以返回函数调用方时，Block变量作用域就结束了，Block会被废弃。但在ARC有效，这种情况编译器会自动完成复制。")]),_._v(" "),n("p",[_._v("在MRC情况下则需要开发者调用copy方法手动复制，否则会报错："),n("code",[_._v("Returning block that lives on the local stack")]),_._v("。由于开发中几乎都是ARC模式，所以手动复制内容不再过多研究。")]),_._v(" "),n("p",[_._v("###Block捕获外界变量：")]),_._v(" "),n("ol",[n("li",[n("strong",[_._v("值拷贝：局部变量、auto自动变量（离开作用域就销毁）；")])]),_._v(" "),n("li",[n("strong",[_._v("指针引用：Static静态变量、OC对象；")])]),_._v(" "),n("li",[n("strong",[_._v("全局变量任何地方都能访问，不需要捕获；")])])]),_._v(" "),n("p",[_._v("###__block做了什么?")]),_._v(" "),n("p",[_._v("使用命令行将代码转化为C++查看其内部结构，与OC代码进行比较")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[_._v("xcrun -sdk iphoneos clang -arch arm64 -framework UIKit -rewrite-objc -fobjc-arc -fobjc-runtime=ios-9.0.0 main.m -o main.cpp\n")])])]),n("p",[_._v("不加__block修饰外部变量：")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[_._v('int d = 40;\nvoid(^block)(void) = ^{\n    NSLog(@"%d", d);\n};\nd++;\nblock();\n')])])]),n("p",[_._v("C++代码：")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[_._v("// block 结构体\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  int d;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _d, int flags=0) : d(_d) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n\n// 代码块\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n  int d = __cself->d; // bound by copy\n  NSLog((NSString *)&__NSConstantStringImpl__var_folders____bsyl0rc97dj3tgk7r520cy880000gn_T_main_f88f53_mi_0, d);\n}\n\nint d = 40;\n// block 声明\nvoid(*block)(void) = ((void (*)())&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, d));\nd++;\n// block();\n((void (*)(__block_impl *))((__block_impl *)block)->FuncPtr)((__block_impl *)block);\n")])])]),n("p",[_._v("加__block修饰外部变量：")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[_._v('__block int d = 40;\nvoid(^block)(void) = ^{\n    NSLog(@"%d", d);\n};\nd++;\nblock();\n')])])]),n("p",[_._v("C++代码：")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[_._v("// __block 生成的结构体\nstruct __Block_byref_d_0 {\n  void *__isa;\n  __Block_byref_d_0 *__forwarding;\n int __flags;\n int __size;\n int d;\n};\n\n// block 结构体\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  __Block_byref_d_0 *d; // by ref\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_d_0 *_d, int flags=0) : d(_d->__forwarding) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n\n// 代码块（d->__forwarding->d）\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n  __Block_byref_d_0 *d = __cself->d; // bound by ref\n  NSLog((NSString *)&__NSConstantStringImpl__var_folders____bsyl0rc97dj3tgk7r520cy880000gn_T_main_585285_mi_0, (d->__forwarding->d));\n}\n\n// __block int d = 40;\n__attribute__((__blocks__(byref))) __Block_byref_d_0 d = {(void*)0,(__Block_byref_d_0 *)&d, 0, sizeof(__Block_byref_d_0), 40};\n\n// block 声明\nvoid(*block)(void) = ((void (*)())&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, (__Block_byref_d_0 *)&d, 570425344));\n\n//d++;\n(d.__forwarding->d)++;\n\n// block();\n((void (*)(__block_impl *))((__block_impl *)block)->FuncPtr)((__block_impl *)block);\n")])])]),n("p",[_._v("总结：")]),_._v(" "),n("ol",[n("li",[n("p",[n("strong",[_._v("__block")]),_._v(" 会生成 "),n("strong",[_._v("__Block_byref_d_0")]),_._v(" 结构体，block结构体会持有它；")])]),_._v(" "),n("li",[n("p",[_._v("外部修改变量时，会通过 "),n("strong",[_._v("d.__forwarding->d")]),_._v(" 改变 "),n("strong",[_._v("__Block_byref_d_0")]),_._v(" 结构体中的值；")])]),_._v(" "),n("li",[n("p",[_._v("在代码块调用时，会通过block结构体持有的指针， "),n("strong",[_._v("d.__forwarding->d")]),_._v(" 获取变量的值；")])])])])}),[],!1,null,null,null);a.default=l.exports}}]);